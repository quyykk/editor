name: CI

# TODO:
# - Run unit tests for all platforms (Blocked by XCode build file creation.)
# - Reduce duplicate code (Blocking: https://github.community/t5/GitHub-Actions/Support-for-YAML-anchors/td-p/30336)
# - Investigate using scoop as package manager on windows
# - Cache build files on all systems (Looking at you OSX)
# - Cache development libraries on windows
# - Run windows builds as matrix with different mingw versions
# - Construct even more intelligent workflows
#    e.g.
#      data/* -> use "latest" build for triggering branch, only run parse and/or acceptance tests
#      source/* -> build new binary, run all tests, cache binary
#      PR opened -> upload artifact ZIPs to PR as comment, and edit/replace as new commits come in
# - Windows: Allow programmers to use their own copy of development libs without hacking a temporary URL in the windows step

on:
  push:
    # Run for pushes to master or a version branch, e.g. a PR was merged ...
    branches:
      - master
      - v[0-9]+.[0-9]+.[0-9]+
    # ... and only when we've possibly changed how the game will function.
    paths:
    - 'source/**'
    - 'data/**'
    - 'tests/**'
    - 'EndlessSky.xcodeproj/**'
    - 'XCode/**'
    - '.github/workflows/**'
    - keys.txt
    - SConstruct
    - .winmake
  pull_request:
    # Run for any push to any pull request, if it modifies source code or game text.
    types: [opened, synchronize]
    paths:
    - 'source/**'
    - 'data/**'
    - 'tests/**'
    - 'EndlessSky.xcodeproj/**'
    - 'XCode/**'
    - '.github/workflows/**'
    - keys.txt
    - SConstruct
    - .winmake


jobs:
  # Figure out what changed, so other jobs in this file can conditionally execute.
  changed:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.filter.outputs.data }}
      game_code: ${{ steps.filter.outputs.game_code }}
      macos: ${{ steps.filter.outputs.macos }}
      windows: ${{ steps.filter.outputs.windows }}
      linux: ${{ steps.filter.outputs.linux }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: .github/path-filters.yml
        token: ${{ github.token }}

  build_ubuntu:
    needs: changed
    # TODO: only build if source changed. otherwise, d/l latest continuous
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04]
        opengl: [desktop, gles]
    env:
        CCACHE_DIR: ./ccache/
        CXX: ccache g++
        ARTIFACT: endless-sky
    steps:
    - uses: actions/checkout@v2
    - name: Restore cached game binary
      id: cache-artifact
      uses: actions/cache@v2
      with:
        path: ${{ env.ARTIFACT }}
        # Rebuild the game binary if source code changed, or if instructions on building the game changed.
        key: ${{ matrix.os }}-${{ matrix.opengl }}-artifact-${{ hashFiles('source/**') }}-${{ hashFiles('SConstruct', '.github/workflows/ci.yml') }}
    - name: Install development dependencies
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo dpkg --clear-avail # Speed up installation and get rid of unwanted lists
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libsdl2-dev libpng-dev libjpeg-turbo8-dev libopenal-dev libmad0-dev libglew-dev libgl1-mesa-dev uuid-dev scons ccache libgles2-mesa
    - name: Print toolchain versions
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        g++ -v
        gcc-ar --version
        ld -v
    - name: Cache ccache results
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ matrix.os }}-${{ matrix.opengl }}-ccache-${{ github.repository }}-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.opengl }}-ccache-${{ github.repository }}-${{ github.ref }}-
          ${{ matrix.os }}-${{ matrix.opengl }}-ccache-${{ github.repository }}-
          ${{ matrix.os }}-${{ matrix.opengl }}-ccache-
    - name: Compile
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: scons -Qj $(nproc) opengl=${{ matrix.opengl }};
    - name: Upload game binary
      uses: actions/upload-artifact@v2
      with:
        name: binary-${{ matrix.os }}-${{ matrix.opengl }}
        path: ${{ env.ARTIFACT }}


  build_windows:
    needs: changed
    # TODO: only build if source changed. otherwise, d/l latest continuous
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    env:
        SCCACHE_DIR: ./sccache/
        DIR_MINGW64: C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32
        DIR_ESLIB: dev64
        CXX: sccache g++
        ARTIFACT: EndlessSky.exe
        AR: gcc-ar
    steps:
    - uses: actions/checkout@v2
    - name: Restore cached game binary
      id: cache-artifact
      uses: actions/cache@v2
      with:
        path: ${{ env.ARTIFACT }}
        # Rebuild the game binary if source code changed, or if instructions on building the game changed.
        key: ${{ matrix.os }}-artifact-${{ hashFiles('source/**') }}-${{ hashFiles('.winmake', '.github/workflows/ci.yml') }}
    - name: Install sccache
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: choco install sccache
    - name: Install development dependencies
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest https://quyykk.github.io/endless-sky.github.io/win64-dev.zip -OutFile win64-dev.zip
        Expand-Archive win64-dev.zip -DestinationPath . -Force
        Remove-Item win64-dev.zip
    - name: Cache sccache results
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: ${{ env.SCCACHE_DIR }}
        key: ${{ matrix.os }}-sccache-${{ github.repository }}-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ matrix.os }}-sccache-${{ github.repository }}-${{ github.ref }}-
          ${{ matrix.os }}-sccache-${{ github.repository }}-
          ${{ matrix.os }}-sccache
    - name: Compile
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: make -re -j ($(Get-CIMInstance -Class 'CIM_Processor').NumberOfLogicalProcessors) -f .winmake
    - name: Prepare game binary
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: COPY .\bin\pkgd\release\endless-sky.exe EndlessSky.exe
    - name: Upload game binary
      uses: actions/upload-artifact@v2
      with:
        name: binary-${{ matrix.os }}
        path: ${{ env.ARTIFACT }}


  build_macos:
    needs: changed
    # TODO: only build if source changed. otherwise, d/l latest continuous
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    env:
      ARTIFACT: Endless Sky
      SDL2_FRAMEWORK: build/SDL2.framework
    steps:
    - uses: actions/checkout@v2
    - name: Restore cached game binary
      id: cache-artifact
      uses: actions/cache@v2
      with:
        path: ${{ env.ARTIFACT }}
        key: ${{ matrix.os }}-artifacts-${{ hashFiles('source/**') }}-${{ hashFiles('.github/workflows/ci.yml', 'EndlessSky.xcodeproj/**', 'utils/set_dylibs_rpath.sh', 'utils/fetch_sdl2_framework.sh') }}
    - name: Update Homebrew
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: brew update
    - name: Install dependencies
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: brew install libmad libpng jpeg-turbo
    - name: Restore cached SDL2 framework
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: ${{ env.SDL2_FRAMEWORK }}
        key: ${{ matrix.os }}-sdl2-${{ hashFiles('.github/workflows/ci.yml', 'EndlessSky.xcodeproj/**', 'utils/set_dylibs_rpath.sh', 'utils/fetch_sdl2_framework.sh') }}
    - name: Compile
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: xcodebuild -configuration "Release" -jobs $(sysctl -n hw.logicalcpu) -quiet
    - name: Prepare game binary
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: mv "build/Release/Endless Sky.app/Contents/MacOS/Endless Sky" .
    - name: Upload game binary
      uses: actions/upload-artifact@v2
      with:
        name: binary-${{ matrix.os }}
        path: ${{ env.ARTIFACT }}
